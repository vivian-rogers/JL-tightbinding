push!(LOAD_PATH, "../src/")

using AbstractAlgebra
using Symbolics
using Operators
using LinearAlgebra
using BlockDiagonals
using UsefulFunctions
using Constants

nG = 3; norb = 2
maxG = Int((nG - 1)/2)
nŒª = 100; na = 5*‚Ñ´;
fG = 2*œÄ/(na*nŒª)




(a, vf, m, ƒß, Œ≤, Œª, E) = @variables a::Real vf::Real m::Real ƒß::Real Œ≤::Real Œª::Real E::Complex
G = 2*œÄ/(a*Œª)

# generate the weyl hamiltonian
kx, ky, kz = @variables kx::Complex ky::Real kz::Real
diag = [œÑ‚ÇÅ‚äó((kx+i*G)*œÉ‚ÇÅ .+ ky*œÉ‚ÇÇ .+ kz*œÉ‚ÇÉ) for i = -maxG:maxG]
Hweyl =  Array(BlockDiagonal(diag))


# define the periodic exchange field
function gtoi(g::Int)
    return Int(maxG+1+g)
end
Mx = zeros(Complex,nG)
My = zeros(Complex,nG)
Mz = zeros(Complex,nG)
#My[gtoi(-1)] = im*Œ≤/2;    My[gtoi(1)] = -im*Œ≤/2
Mz[gtoi(-1)] = Œ≤/2; Mz[gtoi(1)] = Œ≤/2
M = [Mx,My,Mz]

# generate the periodic exchange field term
H·µ¶ = zeros(Complex,nG*norb*2,nG*norb*2)
for ax = 1:3
    Mi = M[ax]
    M·µ¢(index) = (if(index < 1 || index > (2*maxG+1)) return 0 else return Mi[index] end)
    Gterm = zeros(Sym,nG,nG)
    for gb = -maxG:maxG
        for ga = -maxG:maxG
            ia = gtoi(ga); ib = gtoi(gb);
            Gterm[ib,ia] = M·µ¢(gtoi(gb-ga))
        end
    end
    H·µ¶·µ¢ = Gterm‚äóNum.(œÑ‚ÇÄ‚äóœÉ[ax])
    #display(H·µ¶·µ¢)
    H·µ¶ .+= H·µ¶·µ¢
end

display(H·µ¶)
println("\nH·µ¶ ^\n")

H‚ÇÄ = vf*Hweyl .+ m*I(nG)‚äóœÑ‚ÇÉ‚äóœÉ‚ÇÄ .+ H·µ¶



#Rekx, Imkx, ky, kz = symbols("Rekx, Imkx, ky, kz", positive=true)
#diag = [œÑ‚ÇÅ‚äó((Rekx+IM*Imkx+i*G)*œÉ‚ÇÅ .+ ky*œÉ‚ÇÇ .+ kz*œÉ‚ÇÉ) for i = -maxG:maxG]



display(H‚ÇÄ)
#println("\n\nSpectrum:")
#display(H‚ÇÄ.eigenvals())
println("\n\nGenerating characteristic polynomial...")
#@time charpoly = (E*I(nG*norb*2) .- H‚ÇÄ).det(method="berkowitz")
#=
@time charpoly = (E*I(nG*norb*2) .- H‚ÇÄ).det(method="LU")
#atŒì = charpoly.subs(Rekx,0)

#display(charpoly)
atŒì = charpoly.subs([(kz,0)])
#atŒì = charpoly.subs([(kz,0),(E,0)])
# hartree unit definitions
#atŒì = atŒì.subs([(ƒß,hbar),(vf,10^6*MpS),(m,0.5*eV),(Œª,nŒª),(a,10*a‚ÇÄ),(Œ≤,1*eV)])
atŒì = simplify(atŒì)
atŒì = cancel(atŒì)
atŒì = collect(atŒì,kx)
display(atŒì)
atŒì = atŒì.subs(ky,0)
polyŒì = (atŒì.evalf()).as_poly(domain="C")
coeffs = SymPy.all_coeffs(polyŒì)

#atŒì = cancel(atŒì)
#atŒì = simplify(charpoly.subs([(ky,0),(kz,0),(E,0.05)]))
#display(atŒì)
#atŒì = atŒì.subs([(ƒß,1),(vf,1),(m,0.5),(Œª,nŒª),(a,1),(Œ≤,0.00000000000001)])
#decay = atŒì.subs(ƒß,Constants.ƒß/Constants.q)
#decay = decay.subs(vf,10^6)
#decay = decay.subs(m,0.5)
println("\n\nCharacteristic polynomial @ Œì:")
#println("Too hard to display!")
#atŒì = atŒì.evalf()
#=
display(atŒì)
println("\n\nSolving...")
#sols = N.(solve(Eq(atŒì,0), warn=true, rational=false, implicit=true, particular=true))
#sols = nsolve(atŒì,IM)

polyŒì = ((atŒì).evalf()).as_poly(domain="C")
hbar = 1; q = 1; a‚ÇÄ = 1; nm = 18.897*a‚ÇÄ; Eh = 1; eV =Eh/27.211; MpS = (a‚ÇÄ*Eh/hbar)/(2.18769*10^6)
#atŒì = atŒì.subs([(vf, 10^6*MpS),(m, 0.5*eV),(Œª,nŒª),(a,0.5*nm),(Œ≤,1*eV),(ky,0),(E,0)])
polyŒì = polyŒì.subs([(vf, 10^6*MpS),(m, 0.5*eV),(Œª,nŒª),(a,0.5*nm),(Œ≤,1*eV),(ky,0),(E,0)])
sols = N.(solve(Eq(polyŒì,0), warn=true, rational=false, implicit=true, particular=true))
display(sols)
sols = roots(polyŒì)
sols = [key for (key, value) in sols]
#sols = roots(polyŒì,multiple=true)
#sols = nsolve(atŒì,im*(2œÄ/na)+nG*0.1)
#sols = linsolve((atŒì,0),kx)
#sols = (linsolve(Eq(atŒì,0),rational=false))
#sols = ComplexF64.(sols)
display(sols)
#realk = mod.(real.(sols)./(fG/2),2)
=#
realk = real.(sols)./((fG)/2)
imagk = inv.(nm*imag.(sols))
println("\n\nRe(sols) = $realk * ùêó ")
println("\nIm(sols) -> decay rates = $imagk nm")


